-- indexes

SELECT
  address_id,
  address,
  district,
  phone
FROM
  address
WHERE
  phone = '223664661973';

EXPLAIN SELECT
  address_id,
  address,
  district,
  phone
FROM
  address
WHERE
  phone = '223664661973';

CREATE INDEX idx_address_phone
ON address(phone);

SELECT
  indexname,
  indexdef
FROM
  pg_indexes
WHERE
  tablename = 'address';

EXPLAIN SELECT
  address_id,
  address,
  district,
  phone
FROM
  address
WHERE
  phone = '223664661973';

-- UNIQUE Index
CREATE TABLE employees5 (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE
);

SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    tablename = 'employees5';

--  add a column named mobile_phone to the employees table
ALTER TABLE employees5
ADD mobile_phone VARCHAR(20);

-- create a unique index on the mobile_phone column of the employees table
CREATE UNIQUE INDEX idx_employees_mobile_phone
ON employees5(mobile_phone);

-- insert a new row into the employees table
INSERT INTO employees5(first_name, last_name, email, mobile_phone)
VALUES ('John','Doe','[[email protected]](../cdn-cgi/l/email-protection.html)', '(408)-555-1234');

-- attempt to insert another row with the same phone number
INSERT INTO employees5(first_name, last_name, email, mobile_phone)
VALUES ('Jane','Doe','[[email protected]](../cdn-cgi/l/email-protection.html)', '(408)-555-1234');


-- Using PostgreSQL UNIQUE index for multiple columns
ALTER TABLE employees5
ADD work_phone VARCHAR(20),
ADD extension VARCHAR(5);

-- create a unique index that includes both work_phone and extension columns
CREATE UNIQUE INDEX idx_employees_workphone
ON employees5(work_phone, extension);

--  insert another employee with the same work phone number but a different extension
INSERT INTO employees5(first_name, last_name, work_phone, extension)
VALUES('Lily', 'Bush', '(408)-333-1234','1212');

-- attempt to insert a row with the same values in both work_phone and extension columns that already exist in the employees table
INSERT INTO employees5(first_name, last_name, work_phone, extension)
VALUES('Tommy', 'Stark', '(408)-333-1234','1211');



-- index on expression
-- The customer table has a b-tree index defined for the last_name column
-- retrieve the customers with the last names are Purdy
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    last_name = 'Purdy';

-- use the EXPLAIN statement to show the query plan
EXPLAIN
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    last_name = 'Purdy';

-- find customers whose last name is purdy in lowercase
EXPLAIN
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    LOWER(last_name) = 'purdy';

-- define an index on expression using the CREATE INDEX statement
CREATE INDEX idx_ic_last_name
ON customer(LOWER(last_name));

-- retrieve the customers based on a last name in lowercase
EXPLAIN
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    LOWER(last_name) = 'purdy';

-- Partial Index
CREATE INDEX customer_active
ON customer(active)
WHERE active = 0;

EXPLAIN SELECT
  *
FROM
  customer
WHERE
  active = 0;

-- multicolumn indexes
-- PostgreSQL Multicolumn Index example
CREATE TABLE people (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL
);

--  show the query plan that finds the person whose last name is Adams
EXPLAIN SELECT
  id,
  first_name,
  last_name
FROM
  people
WHERE
  last_name = 'Adams';

-- create a multicolumn index that includes both the last_name and first_name columns
CREATE INDEX idx_people_names
ON people (last_name, first_name);

-- show the plan of the query that searches for the person whose last name is Adams (using the new index)
EXPLAIN SELECT
  id,
  first_name,
  last_name
FROM
  people
WHERE
  last_name = 'Adams';

-- find the person whose first name is Lou (without specifying the last name)
EXPLAIN SELECT
  id,
  first_name,
  last_name
FROM
  people
WHERE
  last_name = 'Adams'
  AND first_name = 'Lou';

--  search for the person whose first name is Lou
EXPLAIN SELECT
  id,
  first_name,
  last_name
FROM
  people
WHERE
  first_name = 'Lou';



-- REINDEX statement
--  rebuild all indexes in the film table of the dvdrental database using the REINDEX statement
REINDEX (verbose, concurrently)
TABLE film;

-- rebuild all indexes in the dvdrental database using the REINDEX statement
REINDEX DATABASE dvdrental;

-- DROP INDEX
CREATE INDEX idx_actor_first_name
ON actor (first_name);

SELECT * FROM actor
WHERE first_name = 'John';

EXPLAIN SELECT *
FROM actor
WHERE first_name = 'John';

DROP INDEX idx_actor_first_name;



-- List Indexes using pg_indexes View
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    schemaname = 'public'
ORDER BY
    tablename,
    indexname;

-- To show all the indexes of a table, you use the following statement:
SELECT
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    tablename = 'customer';

-- If you want to get a list of indexes for tables whose names start with the letter c, you can use the following query
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    tablename LIKE 'c%'
ORDER BY
    tablename,
    indexname;


--
-- CREATE DATABASE dvdrental;
-- CREATE SCHEMA marketing; by default it will have public
-- create table marketing.tableA (); by default it will be public.tableA()
